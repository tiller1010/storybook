{"version":3,"sources":["canvas.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","this","updateCanvas","canvas","refs","ctx","getContext","props","pageNumber","clearRect","width","height","beginPath","moveTo","lineTo","stroke","react_default","a","createElement","ref","Component","Page","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","pages","messages","state","currentPage","turnPage","bind","assertThisInitialized","turnPageBack","length","setState","id","className","onClick","src_canvas","App","App_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1c5f2ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './canvas.css';\r\n\r\nclass Canvas extends Component{\r\n  componentDidMount(){\r\n    this.updateCanvas();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.updateCanvas();\r\n  }\r\n\r\n  updateCanvas() {\r\n    const canvas = this.refs.canvas;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if(this.props.pageNumber==='title'){\r\n      ctx.clearRect(0,0,canvas.width,canvas.height);\r\n      ctx.beginPath();\r\n      ctx.moveTo(500,300);\r\n      ctx.lineTo(200,200);\r\n      ctx.stroke();\r\n    }\r\n    if(this.props.pageNumber==='one'){\r\n      ctx.clearRect(0,0,canvas.width,canvas.height);\r\n      ctx.beginPath();\r\n      ctx.moveTo(100,100);\r\n      ctx.lineTo(20,20);\r\n      ctx.stroke();\r\n    }\r\n    if(this.props.pageNumber==='two'){\r\n      ctx.clearRect(0,0,canvas.width,canvas.height);\r\n      ctx.beginPath();\r\n      ctx.moveTo(100,100);\r\n      ctx.lineTo(20,200);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <canvas ref=\"canvas\" height=\"517\" width=\"1087\"></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Canvas;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Canvas from './canvas.js'\r\n\r\n\r\nclass Page extends Component{\r\n  constructor(props){\r\n    super();\r\n    this.state={\r\n      currentPage: this.pages[this.pageNumber]\r\n    }\r\n    this.turnPage=this.turnPage.bind(this);\r\n    this.turnPageBack=this.turnPageBack.bind(this);\r\n  }\r\n\r\n  pages=['title','one','two'];\r\n  pageNumber=0;\r\n  messages=['Jaw-Vah\\'s Crypt','In the crypt there exist creatures known as \"Very-Ables\"','This is the second page'];\r\n\r\n  turnPage(){\r\n    if(this.pageNumber<this.pages.length-1){\r\n      ++this.pageNumber;\r\n    }\r\n    this.setState({\r\n      currentPage: this.pages[this.pageNumber]\r\n    });\r\n  }\r\n\r\n  turnPageBack(){\r\n    if(this.pageNumber>0){\r\n      --this.pageNumber;\r\n    }\r\n    this.setState({\r\n      currentPage: this.pages[this.pageNumber]\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div id='border' className={this.state.currentPage}>\r\n        <div className='frame'></div>\r\n          <div id='text'>{this.messages[this.pageNumber]}</div>\r\n          <div id='pageNumber'>{this.pageNumber}</div>\r\n            <button id='previous' onClick={this.turnPageBack}>Previous Page</button>\r\n            <button id='next' onClick={this.turnPage}>Next Page</button>\r\n              <div className='buildBlocks'>\r\n                <div id='block1' className='blocks'></div>\r\n                <div id='block2' className='blocks'></div>\r\n                <div id='block3' className='blocks'></div>\r\n                <div id='block4' className='blocks'></div>\r\n                <div id='block5' className='blocks'></div>\r\n                <div id='block6' className='blocks'></div>\r\n                <div id='block7' className='blocks'></div>\r\n                <div id='block8' className='blocks'></div>\r\n                <div id='block9' className='blocks'></div>\r\n                <div id='block10' className='blocks'></div>\r\n            </div>\r\n            <Canvas pageNumber={this.state.currentPage}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Page/>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}